@using Boltzrpc
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Security
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BTCPayServer.Plugins.Boltz.Models.AutoSwapStatus
@{
    var status = Model.Status;
    var statusClass = status.Error != "" ? "disabled" : status.Running ? "enabled" : "pending";
    var statusString = status.Error != "" ? "Error" : status.Running ? "Running" : "Disabled";
    var name = Model.SwapperType + " Swaps";
}
<div class="d-flex flex flex-column gap-2">
    <div class="d-flex align-items-center justify-content-start gap-2">
        @if (Model.Compact)
        {
            <span class="btcpay-status btcpay-status--@(statusClass)"></span>
            <h6 class="text-truncate flex-grow-1">@name @statusString</h6>
            <a asp-action="Index" asp-controller="Boltz" asp-route-storeId="@Context.GetImplicitStoreId()">
                Manage
            </a>
        }
        else
        {
            <h4 class="my-0">@name</h4>
            <span class="btcpay-status btcpay-status--@(statusClass)"></span>
            <h6 class="text-truncate">@statusString</h6>
        }
    </div>
    @if (status.Description != "" && !Model.Compact)
    {
        <p class="my-1">
            @status.Description
        </p>
    }
    @if (status.Error != "")
    {
        <p class="my-1">
            @status.Error
        </p>
    }
    @if (!Model.Compact)
    {
        <div class="fw-semibold">
            @if (Model.SwapperType == SwapperType.Lightning)
            {
                <span>Using wallet</span>
                <partial name="Boltz/_WalletLink" model="Model.Wallet"/>
            }
            else
            {
                <span>From wallet</span>
                <partial name="Boltz/_WalletLink" model="Model.Wallet"/>
                <span>to wallet</span>
                <partial name="Boltz/_WalletLink" model="Model.ToWallet"/>
            }
        </div>
    }
    @if (status.Budget != null)
    {
        var budget = status.Budget;
        var stats = Model.Stats;
        stats.Add(new() { Name = "Remaining Budget", Value = budget.Remaining, Unit = Unit.Sat });
        stats.AddRange(BoltzClient.ParseStats(budget.Stats));
        <partial name="Boltz/_Stats" model="stats"/>
    }
</div>

