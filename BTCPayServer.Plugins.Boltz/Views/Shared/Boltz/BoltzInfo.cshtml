@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Security
@using Google.Protobuf
@using Grpc.Core
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject BoltzService BoltzService
@model StoreDashboardViewModel
@{
    var storeId = Context.GetImplicitStoreId();
    var client = BoltzService.GetClient(storeId);
    var settings = BoltzService.GetSettings(storeId);
    if (client is null || settings is null) return;
}

<style>

@@media (min-width: 1400px) {
    .widget.boltz-lightning {
        grid-column-start: 1;
        grid-column-end: 13;
    }
}
</style>


<div id="StoreBoltzInfo-@Model.StoreId" class="widget boltz-lightning flex-column gap-3">
    <header>
        <h4>Boltz</h4>
        <a asp-action="Index" asp-controller="Boltz" asp-route-storeId="@storeId">
            Manage
        </a>
    </header>

    @if (BoltzService.Daemon.UpdateAvailable)
    {
        <div class="alert alert-warning">
            <p>
                New version available
            </p>
        </div>
    }

    @try
    {
        var stats = await client.GetStats();
        /*
        var info = await client.GetInfo();
        @if (info.ClaimableSwaps.Count > 0 || info.RefundableSwaps.Count > 0)
        {
        }
        */

        <div class="d-flex row-gap-2 column-gap-5 flex-wrap flex-row">
            @if (await client.IsAutoSwapConfigured())
            {
                var status = await client.GetAutoSwapStatus();
                @if (!string.IsNullOrEmpty(status.Lightning?.Description))
                {
                    var lnStatus = new AutoSwapStatus { SwapperType = SwapperType.Lightning, Status = status.Lightning, Compact = true };
                    <partial name="Boltz/_AutoSwapStatus" model="lnStatus"></partial>
                }

                @if (!string.IsNullOrEmpty(status.Chain?.Description))
                {
                    var chainStatus = new AutoSwapStatus { SwapperType = SwapperType.Chain, Status = status.Chain, Compact = true };
                    <partial name="Boltz/_AutoSwapStatus" model="chainStatus"/>
                }
            }

            @if (settings.Mode == BoltzMode.Standalone)
            {
                <div class="d-flex flex flex-column gap-2">
                    <div class="d-flex align-items-center justify-content-start gap-2">
                        <span class="btcpay-status btcpay-status--enabled"></span>
                        <h6 class="text-truncate">Lightning Payments</h6>
                    </div>
                    <partial name="Boltz/_Stats" model="@BoltzClient.ParseStats(stats)"/>
                </div>
            }
        </div>
    }
    catch (RpcException)
    {
        <div class="alert alert-warning">
            <p>
                Client connection not working.
            </p>
        </div>
    }
</div>