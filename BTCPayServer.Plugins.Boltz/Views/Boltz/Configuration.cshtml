@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Boltzrpc
@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Security
@model BTCPayServer.Plugins.Boltz.Models.BoltzConfig
@{
    ViewData.SetActivePage("Boltz", "Configuration", "Configuration");

    var storeId = Context.GetImplicitStoreId();
    var mode = Model.Settings?.Mode;
}


@if (mode == BoltzMode.Rebalance)
{
    var walletList = new SelectList(
        Model.ExistingWallets,
        nameof(ExistingWallet.Value),
        nameof(ExistingWallet.Name),
        Model.Ln?.Wallet,
        nameof(ExistingWallet.CurrencyName)
    );
    var swapTypes = new SelectListItem[] { new ("Reverse", "reverse"), new ("Normal", "normal") , new ("Both", "")   };
    var swapTypeList = new SelectList(swapTypes, nameof(SelectListItem.Value), nameof(SelectListItem.Text), Model.Ln?.SwapType);

    <form method="post" class="mt-3" id="autoswapForm">
        <div class="d-flex flex-row justify-content-between my-3">
            <h4 class="my-0">Lightning</h4>
            <a asp-action="SetupMode" asp-route-storeId="@storeId" asp-route-mode="@BoltzMode.Rebalance" class="btn btn-secondary text-nowrap">
                Setup
            </a>
        </div>

        <div class="form-group d-flex align-items-center">
            <input asp-for="Ln.Enabled" id="PayJoinEnabled" type="checkbox" class="btcpay-toggle me-2"/>
            <label asp-for="Ln.Enabled" class="form-label mb-0 me-1"></label>
        </div>

        <div class="form-group mt-4">
            <label asp-for="Ln.SwapType" class="form-label">Swap Type</label>
            <select asp-items="swapTypeList" asp-for="Ln.SwapType" class="form-select" id="swapType">
            </select>
        </div>
        <div class="form-group" id="inboundInput">
            <label asp-for="Ln.InboundBalancePercent" class="form-label">Inbound Balance Percent</label>
            <input type="number" min="0" max="100" asp-for="Ln.InboundBalancePercent" class="form-control"></input>
            <span asp-validation-for="Ln.InboundBalancePercent" class="text-danger"></span>
        </div>

        <div class="form-group" id="outboundInput">
            <label asp-for="Ln.OutboundBalancePercent" class="form-label">Outbound Balance Percent</label>
            <input type="number" min="0" max="100" asp-for="Ln.OutboundBalancePercent" class="form-control"></input>
            <span asp-validation-for="Ln.OutboundBalancePercent" class="text-danger"></span>
        </div>

        <div class="my-4">
            <button class="d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0 mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#AdvancedLightningSettings" aria-expanded="false" aria-controls="AdvancedLightningSettings">
                <vc:icon symbol="caret-down"/>
                <span class="ms-1">Advanced settings</span>
            </button>

            <div id="AdvancedLightningSettings" class="collapse">

                <input type="hidden" asp-for="Ln.StaticAddress"/>

                <div class="form-group mt-4">
                    <label asp-for="Ln.Wallet" class="form-label"></label>
                    <div class="d-flex flex-row gap-2">
                        <select asp-items="walletList" asp-for="Ln.Wallet" class="form-select flex-grow-1">
                        </select>
                        <a asp-action="SetupWallet" asp-route-storeId="@storeId" asp-route-flow="@WalletSetupFlow.Manual" class="btn btn-secondary text-nowrap">
                            Setup another wallet
                        </a>
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="Ln.Budget" class="form-label">Budget</label>
                    <input type="number" min="0" asp-for="Ln.Budget" class="form-control"></input>
                    <span asp-validation-for="Ln.Budget" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Ln.BudgetInterval" class="form-label">Budget Interval (in days)</label>
                    <input type="number" min="0" asp-for="Ln.BudgetInterval" class="form-control"></input>
                    <span asp-validation-for="Ln.BudgetInterval" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Ln.MaxFeePercent" class="form-label">Max Fee Percent</label>
                    <input type="number" min="0" max="100" asp-for="Ln.MaxFeePercent" class="form-control"></input>
                    <span asp-validation-for="Ln.MaxFeePercent" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="d-flex flex-row gap-2 justify-content-start">
            <button name="command" type="submit" class="btn btn-success" value="BoltzSetLnConfig">
                Save
            </button>
            @if (Model.Chain == null && Model.Ln.Currency == Currency.Lbtc)
            {
                <a asp-action="SetupChain" asp-route-storeId="@storeId" class="btn btn-secondary text-nowrap">
                    Setup Chain Swaps
                </a>
            }
        </div>
    </form>
}


@if (mode == BoltzMode.Standalone || Model.Chain != null)
{
    <form method="post" class="mt-3" id="chainForm">
        @if (mode == BoltzMode.Standalone)
        {
            <div class="form-group mt-4">
                <label asp-for="Settings.StandaloneWallet.Name" class="form-label">Lightning Wallet</label>
                <div class="d-flex flex-row gap-2">
                    <select asp-items="Model.WalletSelectList(Currency.Lbtc)" asp-for="Settings.StandaloneWallet.Name" class="form-select flex-grow-1">
                    </select>
                    <a asp-action="SetupWallet" asp-route-storeId="@storeId" asp-route-flow="@WalletSetupFlow.Manual" asp-route-currency="@Currency.Lbtc" class="btn btn-secondary text-nowrap">
                        Setup another liquid wallet
                    </a>
                </div>
            </div>
        }
        @if (Model.Chain != null)
        {
            <h4 class="my-3">Chain</h4>

            <div class="form-group d-flex align-items-center">
                <input asp-for="Chain.Enabled" type="checkbox" class="btcpay-toggle me-2"/>
                <label asp-for="Chain.Enabled" class="form-label mb-0 me-1"></label>
            </div>

            <div class="form-group">
                <label asp-for="Chain.MaxBalance" class="form-label">Max Balance (satoshis)</label>
                <input type="number" asp-for="Chain.MaxBalance" class="form-control"></input>
                <span asp-validation-for="Chain.MaxBalance" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Chain.ReserveBalance" class="form-label">Reserve Balance (satoshis)</label>
                <input type="number" asp-for="Chain.ReserveBalance" class="form-control" />
                <span asp-validation-for="Chain.ReserveBalance" class="text-danger"></span>
            </div>


            <input type="hidden" asp-for="Chain.ToAddress"/>

            <div class="form-group mt-4">
                <label asp-for="Chain.ToWallet" class="form-label">Mainchain Wallet</label>
                <div class="d-flex flex-row gap-2">
                    <select asp-items="Model.WalletSelectList(Currency.Btc)" asp-for="Chain.ToWallet" class="form-select flex-grow-1">
                    </select>
                    <a asp-action="SetupWallet" asp-route-storeId="@storeId" asp-route-flow="@WalletSetupFlow.Manual" asp-route-currency="@Currency.Btc" class="btn btn-secondary text-nowrap">
                        Setup another mainchain wallet
                    </a>
                </div>
            </div>

            <div class="my-4">
                <button class="d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0 mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#AdvancedChainSettings" aria-expanded="false" aria-controls="AdvancedChainSettings">
                    <vc:icon symbol="caret-down"/>
                    <span class="ms-1">Advanced settings</span>
                </button>

                <div id="AdvancedChainSettings" class="collapse">
                    <div class="form-group">
                        <label asp-for="Chain.Budget" class="form-label">Budget</label>
                        <input type="number" min="0" asp-for="Chain.Budget" class="form-control"></input>
                        <span asp-validation-for="Chain.Budget" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Chain.BudgetInterval" class="form-label">Budget Interval (in days)</label>
                        <input type="number" min="0" asp-for="Chain.BudgetInterval" class="form-control"></input>
                        <span asp-validation-for="Chain.BudgetInterval" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Chain.MaxFeePercent" class="form-label">Max Fee Percent</label>
                        <input type="number" min="0" max="100" asp-for="Chain.MaxFeePercent" class="form-control"></input>
                        <span asp-validation-for="Chain.MaxFeePercent" class="text-danger"></span>
                    </div>
                </div>
            </div>
        }

        <div class="d-flex flex-row gap-2 justify-content-start">
            <button name="command" type="submit" class="btn btn-success" value="BoltzSetChainConfig">
                Save
            </button>
            @if (Model.Chain == null)
            {
                <a asp-action="SetupChain" asp-route-storeId="@storeId" class="btn btn-secondary text-nowrap">
                    Setup Chain Swaps
                </a>
            }
        </div>
    </form>
}


<script>

document.addEventListener("DOMContentLoaded", function () {
    const swapType = $('#swapType');
    
    const update = () => {
        const inbound = $('#inboundInput');
        const outbound = $('#outboundInput');
        const readonly = $('.readonly');
        
        const normalAllowed = swapType.val() !== "reverse";
        const reverseAllowed = swapType.val() !== "normal";
        
        if (reverseAllowed) {
            inbound.show();
            inbound.prop('disabled', false);
        } else {
            inbound.hide();
            inbound.prop('disabled', true);
        }
        
        if (normalAllowed) {
            outbound.show();
            outbound.prop('disabled', false);
            readonly.hide()
        } else {
            outbound.hide();
            outbound.prop('disabled', true);
            readonly.show()
        }
    }
    swapType.change(update);
    update()
  })
</script>