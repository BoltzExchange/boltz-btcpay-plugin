@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Security
@using Boltzrpc
@model BTCPayServer.Plugins.Boltz.Models.BoltzInfo
@inject BoltzService BoltzService
@{
    ViewData.SetActivePage("Boltz", "Status", "Status");

    var storeId = Context.GetImplicitStoreId();

    var settings = BoltzService.GetSettings(storeId);

    var chainRecommendation = Model.Recommendations?.Chain.FirstOrDefault();
}

@if (Model.SwapInfo != null)
{
    var type = Model.SwapInfo.ChainSwap != null ? SwapType.Chain : Model.SwapInfo.ReverseSwap != null ? SwapType.Reverse : SwapType.Submarine;
    ViewData["Title"] = $"{type} Swap";
    <h3 class="text-center mx-auto">@ViewData["Title"]</h3>
    <partial name="_SwapInfoPartial" model="Model.SwapInfo"/>
}
else
{
    <div class="d-grid gap-3">
        @if (settings?.Mode == BoltzMode.Standalone && Model.Stats is not null && Model.StandaloneWallet is not null)
        {
            var stats = BoltzClient.ParseStats(Model.Stats);

            var balance = Model.StandaloneWallet.Balance;
            var walletId = Model.StandaloneWallet.Id;
            if (balance?.Unconfirmed > 0)
            {
                stats.Insert(0, new Stat { Name = "Unconfirmed Balance", Unit = Unit.Sat, Value = balance.Unconfirmed });
            }

            stats.Insert(0, new Stat { Name = "Total Balance", Unit = Unit.Sat, Value = balance?.Total });

            <div class="widget">
                <header>
                    <h4>Lightning Payments</h4>
                </header>
                <div class="d-flex flex-column gap-2 align-items-start">
                    <partial name="Boltz/_Fees" model="FeesModel.Standalone"/>
                    <h5 class="mb-0">Wallet</h5>
                    <partial name="Boltz/_Stats" model="stats"/>
                    <partial name="_WalletButtons" model="Model.StandaloneWallet"/>
                </div>
            </div>
        }

        @if (Model.Status is not null)
        {
            @if (Model.Ln is not null)
            {
                var ln = new AutoSwapStatus { SwapperType = SwapperType.Lightning, Status = Model.Status.Lightning };
                var pendingLnSwaps = Model.PendingAutoSwaps?.Where(info => info.Type != SwapType.Chain).ToList();
                var balance = Model.RebalanceWallet?.Balance;
                if (balance is not null)
                {
                    ln.Stats =
                    [
                        new() { Name = "Wallet Balance", Value = balance.Total, Unit = Unit.Sat }
                    ];
                }

                <div class="widget d-flex gap-3 flex-column">
                    <div>
                        <partial name="Boltz/_AutoSwapStatus" model="ln"/>
                        @if (Model.RebalanceWallet is not null)
                        {
                            <partial name="_WalletButtons" model="Model.RebalanceWallet"/>
                        }
                    </div>

                    @if (Model.Recommendations is not null)
                    {
                        <div>
                            <h5>Recommendations</h5>
                            <partial name="Boltz/_LightningRecommendations" model="Model.Recommendations.Lightning"></partial>
                        </div>
                    }
                    @if (pendingLnSwaps?.Count > 0)
                    {
                        <div>
                            <h5>Pending Swaps</h5>
                            <partial name="Boltz/_SwapsTable" model="pendingLnSwaps"/>
                        </div>
                    }

                    @if (Model.Ln.SwapType != "normal")
                    {
                        var fees = new FeesModel { Pair = new Pair { From = Currency.Btc, To = Model.Ln.Currency }, SwapType = SwapType.Reverse };
                        <div>
                            <h5>Reverse Swap Info</h5>
                            <partial name="Boltz/_Fees" model="fees"/>
                        </div>
                    }

                    @if (Model.Ln.SwapType != "reverse")
                    {
                        var fees = new FeesModel { Pair = new Pair { From = Model.Ln.Currency, To = Currency.Btc }, SwapType = SwapType.Submarine };
                        <div>
                            <h5>Submarine Swap Info</h5>
                            <partial name="Boltz/_Fees" model="fees"/>
                        </div>
                    }
                </div>
            }

            @if (chainRecommendation is not null)
            {
                var chain = new AutoSwapStatus
                {
                    SwapperType = SwapperType.Chain, Status = Model.Status.Chain
                };
                if (settings?.Mode == BoltzMode.Rebalance)
                {
                    chain.Stats = new List<Stat>
                    {
                        new() { Name = "From Wallet Balance", Value = chainRecommendation.WalletBalance.Total, Unit = Unit.Sat },
                    };
                }

                var fees = new FeesModel { Pair = new Pair { From = Currency.Lbtc, To = Currency.Btc }, SwapType = SwapType.Chain };
                var pendingChainSwaps = Model.PendingAutoSwaps?.Where(info => info.Type == SwapType.Chain).ToList();

                <div class="widget d-flex gap-3 flex-column">
                    <partial name="Boltz/_AutoSwapStatus" model="chain"/>
                    @if (chainRecommendation.Swap is not null)
                    {
                        <div>
                            <h5>Upcoming Swap</h5>
                            <partial name="Boltz/_ChainRecommendations" model="chainRecommendation.Swap"/>
                        </div>
                    }
                    @if (pendingChainSwaps?.Count > 0)
                    {
                        <div>
                            <h5>Pending Swaps</h5>
                            <partial name="Boltz/_SwapsTable" model="pendingChainSwaps"/>
                        </div>
                    }
                    <div>
                        <h5>Swap Info</h5>
                        <partial name="Boltz/_Fees" model="fees"/>
                    </div>
                </div>
            }
        }
    </div>
}