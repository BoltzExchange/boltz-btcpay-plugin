@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Security
@using Boltzrpc
@model BTCPayServer.Plugins.Boltz.Models.BoltzInfo
@inject BoltzService BoltzService
@{
    ViewData.SetActivePage("Boltz", "Status", "Status");

    var storeId = Context.GetImplicitStoreId();

    var settings = BoltzService.GetSettings(storeId);

    var chainRecommendation = Model.Recommendations?.Chain.First();
}

<div class="d-flex flex-column gap-3">
    @if (Model.Status is not null)
    {
        <div class="widget">
            <h4 class="mb-3">Autoswap</h4>
            <div class="d-flex flex-column gap-4">
                @if (Model.Recommendations?.Lightning is not null)
                {
                    var ln = new AutoSwapStatus { Name = "Lightning", Status = Model.Status.Lightning };
                    <div>
                        <partial name="Boltz/_AutoSwapStatus" model="ln"/>
                        <partial name="Boltz/_LightningRecommendations" model="Model.Recommendations.Lightning"></partial>
                    </div>
                }

                @if (chainRecommendation is not null)
                {
                    var chain = new AutoSwapStatus
                    {
                        Name = "Chain", Status = Model.Status.Chain, Stats = new List<Stat>
                        {
                            new() { Name = "From Wallet Balance", Value = chainRecommendation?.WalletBalance.Confirmed ?? 0, Unit = Unit.Sat },
                        }
                    };

                    <partial name="Boltz/_AutoSwapStatus" model="chain"/>
                    @if (chainRecommendation.Swap is not null)
                    {
                        <h5>Upcoming Swap</h5>
                        <partial name="Boltz/_ChainRecommendations" model="chainRecommendation.Swap"/>
                    }
                }
            </div>
        </div>
    }
    @if (settings?.Mode == BoltzMode.Standalone && Model.Stats is not null)
    {
        <div class="widget">
            <div class="d-flex flex-column gap-2">
                <h4>Total Swap Stats</h4>
                <partial name="Boltz/_Stats" model="BoltzClient.ParseStats(Model.Stats)"/>
            </div>
        </div>
        <div class="widget">
            <partial name="Boltz/_Fees"/>
        </div>
    }

    @if (Model.Swaps is not null)
    {
        var swaps = Model.Swaps;
        var reverseSwaps = swaps.ReverseSwaps.ToList()
            .Select(info => (info.Id, Type: SwapType.Reverse, info.Pair, info.State, info.Status, Amount: (ulong)info.OnchainAmount, info.CreatedAt)).ToList();
        var normal = swaps.Swaps.ToList()
            .Select(info => (info.Id, Type: SwapType.Submarine, info.Pair, info.State, info.Status, Amount: info.ExpectedAmount, info.CreatedAt));
        var chain = swaps.ChainSwaps.ToList()
            .Select(info => (info.Id, Type: SwapType.Chain, info.Pair, info.State, info.Status, info.FromData.Amount, info.CreatedAt));
        reverseSwaps.AddRange(normal);
        reverseSwaps.AddRange(chain);
        reverseSwaps.Sort((a, b) => b.CreatedAt.CompareTo(a.CreatedAt));

        @if (reverseSwaps.Count > 0)
        {
            <div class="widget">
                <h4>Swaps</h4>
                <div class="table-responsive mt-0">
                    <table class="table table-hover mb-0">
                        <thead>
                        <tr>
                            <th class="text-nowrap">ID</th>
                            <th>Type</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Date</th>
                            <th>State</th>
                            <th class="text-nowrap">Status</th>
                            <th>Amount</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var payment in reverseSwaps)
                        {
                            <tr>
                                <td>@payment.Id</td>
                                <td>@payment.Type</td>
                                <td>@BoltzClient.CurrencyName(payment.Pair.From)</td>
                                <td>@BoltzClient.CurrencyName(payment.Pair.To)</td>
                                <td>@(DateTimeOffset.FromUnixTimeSeconds(payment.CreatedAt).ToBrowserDate())</td>
                                <td>@payment.State</td>
                                <td>@payment.Status</td>
                                <td>@payment.Amount</td>
                            </tr>
                        }

                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
</div>