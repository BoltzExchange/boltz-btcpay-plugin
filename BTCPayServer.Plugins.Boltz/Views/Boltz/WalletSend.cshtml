@using Boltzrpc
@using BTCPayServer.Abstractions.TagHelpers
@using BTCPayServer.Components.TruncateCenter
@using BTCPayServer.Payments
@using BTCPayServer.Plugins.Boltz
@using BTCPayServer.Plugins.Boltz.Models
@using BTCPayServer.Services
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BTCPayServer.Plugins.Boltz.Models.WalletSendModel
@inject TransactionLinkProviders TransactionLinkProviders
@inject BoltzService BoltzService
@{
    Layout = "_LayoutSetup";
    var currency = Model.Wallet.Currency;
    var currencyName = BoltzClient.CurrencyName(currency);
    var pair = new Pair { From = currency, To = Currency.Btc };
    ViewData["Title"] = $"Send From {currencyName} Wallet";
    var balance = Model.Wallet.Balance.Confirmed;
}

@if (Model.SwapInfo != null)
{
    <partial name="_SwapInfoPartial" model="Model.SwapInfo"/>
}
else if (balance == 0)
{
    ViewData["Description"] = $"Pick Lightning or {BoltzClient.CurrencyName(pair.To)} to swap out of your {currencyName} wallet";
    <div class="alert alert-warning">
        You have no confirmed balance in your wallet
    </div>
}
else if (Model.TransactionId != null)
{
    var link = BoltzService.GetTransactionLink(currency, Model.TransactionId);
    <div class="payment-box mt-3">
        <div class="alert alert-success">
            Funds sent successfully
        </div>
        <div class="input-group mt-3">
            <div class="form-floating">
                <vc:truncate-center text="@Model.TransactionId" link="@link" padding="15" elastic="true" classes="form-control-plaintext" id="Transaction"/>
                <label for="Transaction">Transaction</label>
            </div>
        </div>
    </div>
}
else
{
    var lnInfo = (await BoltzService.GetPairInfo(pair, SwapType.Submarine))!;
    var chainInfo = (await BoltzService.GetPairInfo(pair, SwapType.Chain))!;
    var maxSend = Math.Max((long)(balance - Model.ReserveBalance), 0);
    lnInfo.Limits.Maximal = Math.Min(lnInfo.Limits.Maximal, balance);
    chainInfo.Limits.Maximal = Math.Min(chainInfo.Limits.Maximal, balance);

    @section PageFootContent {
        <partial name="_ValidationScriptsPartial"/>
        <script>
        $(document).ready(() => {
            const destination = $('#Destination')
            const amount = $('#Amount')
            const amountGroup = $('#AmountGroup')
            const lnLimits = @Safe.Json(lnInfo.Limits)
            const chainLimits = @Safe.Json(chainInfo.Limits)
            const balance = @Safe.Json(balance)
            const typeLn = @Safe.Json(SendType.Lightning.ToString());
            const typeChain = @Safe.Json(SendType.Chain.ToString());
            let prev = "";

            const update = (sendType) => {
                if (prev === sendType) return;
                prev = sendType;
                destination.val('')
                if (sendType === typeLn) {
                    amountGroup.hide()
                    amount.removeAttr('required')
                } else {
                    amountGroup.show()
                    amount.attr('required', true)
                }
                let limits = sendType === typeLn ? lnLimits : sendType === typeChain ? chainLimits : {minimal: 0, maximal: balance};
                amount.attr({
                    min: limits.minimal,
                    max: limits.maximal,
                })
            }
            update('@SendType.Native');
            $('form').on('change', e => {
                const formData = new FormData(e.currentTarget)
                update(formData.get('SendType'))
            })

            $(".crypto-fee-link").on("click", function (elem) {
                $(this).parent().children().removeClass("active");
                const val = $(this).addClass("active").val();
                $("#FeeSatoshiPerByte").val(val);
                return false;
            });

            $(".crypto-balance-link").on("click", function (elem) {
                const val = $(this).text();
                const parentContainer = $(this).parents(".form-group");
                const outputAmountElement = parentContainer.find("#Amount");
                outputAmountElement.val(val);
            });
        })
    </script>
    }

    <form method="post" class="mt-3">
        <div id="SendTypeTablist" class="nav btcpay-pills align-items-center justify-content-center mb-3" role="tablist">
            @foreach (var sendType in Enum.GetValues(typeof(SendType)).Cast<SendType>())
            {
                var enabled = Model.SendType == sendType;
                var name = sendType switch
                {
                    SendType.Native => BoltzClient.CurrencyName(pair.From),
                    SendType.Lightning => "Lightning",
                    SendType.Chain => BoltzClient.CurrencyName(pair.To),
                    _ => throw new ArgumentOutOfRangeException()
                };
                <input
                    asp-for="SendType" value="@sendType" type="radio"
                    id="SendType-@sendType" data-bs-toggle="pill" data-bs-target="#@sendType" role="tab"
                    aria-controls="@sendType" aria-selected="@enabled" class="@(enabled ? "active" : "")"/>
                <label for="SendType-@sendType">@name</label>
            }
        </div>


        <div class="tab-content mb-3">
            <div class="tab-pane show active" id="@SendType.Native" role="tabpanel">
                <partial name="Boltz/_Stats" model="@(new List<Stat> { new() { Name = "Wallet Balance", Unit = Unit.Sat, Value = balance } })"/>
            </div>
            <div class="tab-pane" id="@SendType.Lightning" role="tabpanel">
                <partial name="Boltz/_Stats" model="BoltzService.PairStats(lnInfo)"/>
            </div>
            <div class="tab-pane" id="@SendType.Chain" role="tabpanel">
                <partial name="Boltz/_Stats" model="BoltzService.PairStats(chainInfo)"/>
            </div>
        </div>

        <div class="form-group">
            <label asp-for="Destination" class="form-label">Destination</label>
            <input required id="Destination" asp-for="Destination" placeholder="Paste invoice or address" class="form-control"/>
            <span asp-validation-for="Destination" class="text-danger"></span>
        </div>

        <div class="form-group" id="AmountGroup">
            <label asp-for="Amount" class="form-label">Amount (satoshi)</label>
            <input id="Amount" asp-for="Amount" type="number" placeholder="How much to send" class="form-control"/>
            <span asp-validation-for="Amount" class="text-danger"></span>
            <div class="form-text crypto-info">
                Max send (@Model.ReserveBalance sats reserve) is
                <button type="button" class="crypto-balance-link btn btn-link p-0 align-baseline">@maxSend</button> <span>sats</span>.
            </div>
        </div>


        <button type="submit" class="btn btn-success">
            Send
        </button>
    </form>
}